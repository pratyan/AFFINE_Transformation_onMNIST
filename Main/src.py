# -*- coding: utf-8 -*-
"""AFFINE_Trans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pFDMyRawoyOh3Dc92acETeRDRoQ7a58s
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import scipy

from scipy.ndimage import affine_transform

(x_train,y_train), (x_test,y_test) = tf.keras.datasets.mnist.load_data()

imag_1 =np.array(x_train[20])
plt.imshow(imag_1)
plt.show()

#centroid
# a = [a for a in range(0,28)]
# b = [a for a in range(0,28)]

x,y = np.mgrid[:28,:28]

print(x)

cen_x  = np.sum(x*imag_1)/np.sum(imag_1)
cen_y = np.sum(y*imag_1)/np.sum(imag_1)

print(cen_x)
print(cen_y)

#covariance

X = np.sum((x - cen_x)**2*imag_1)/np.sum(imag_1)
Y = np.sum((y - cen_y)**2*imag_1)/np.sum(imag_1)
XY = np.sum((x - cen_x)*(y - cen_y)*imag_1)/np.sum(imag_1)

cov = [[X,XY],[XY,Y]]

print(cov)

#theta

theta = np.arctan((2*XY)/(X-Y))/2

print(theta)

#Rotaional Matrix

Rotate = [[np.cos(theta), -np.sin(theta)],[np.sin(theta), np.cos(theta)]]

print(Rotate)

corr = XY/X 
correlation_matrix = [[1,0],[corr,1]]

Offset=[cen_x,cen_y]-np.dot(correlation_matrix,[14,14])
  print(Offset)

from scipy.ndimage import affine_transform
rotate=affine_transform(imag_1,correlation_matrix,offset=Offset)
#print(rotate)

import matplotlib.pyplot as plt

plt.imshow(rotate)
